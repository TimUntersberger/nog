import nog.popup
import nog.plugin

/// Unmanages all windows and exits the application.
extern fn quit()

/// Toggles the work mode.
extern fn toggle_work_mode()

/// Toggles the work mode.
/// @param mode String
extern fn toggle_mode(mode)

/// Toggles the work mode.
/// @param mode String
/// @param callback (bind: (keycombo: String, callback: () -> Void) -> Void) -> Void
/// @example
/// nog.mode("custom", bind => {
///   bind("F1", () => print("Hello World"))
/// })
/// @example
extern fn mode(mode, callback)

/// Defines a new keybinding that calls the callback when the given key combo is pressed.
///
/// `always_active` is optional and defaults to false. 
/// This flag tells nog to never unregister the keybinding as long as the program is running.
/// @param key_combo String
/// @param callback () -> Void
/// @param always_active Boolean?
/// @example
/// nog.bind("F1", () => print("Hello World"))
/// @example
extern fn bind(key_combo, callback, always_active)

/// Defines a new keybinding for each key in the map, where the key has the provided modifier 
/// prepended and the keybinding calls the provided callback with its value.
///
/// `always_active` is optional and defaults to false. 
/// This flag tells nog to never unregister the keybinding as long as the program is running.
/// @param modifier String
/// @param callback () -> Void
/// @param map Map<String, Any>
/// @param always_active Boolean?
/// @example
/// nog.bind_map("Alt", nog.workspace.focus, #{
///   "H": "Left",
///   "J": "Down",
///   "K": "Up",
///   "L": "Right"
/// })
/// @example
extern fn bind_map(modifier, callback, map, always_active)

/// Defines a new keybinding for each item in the array, where the key is the modifier + index and 
/// the keybinding calls the provided callback with the item.
///
/// `always_active` is optional and defaults to false. 
/// This flag tells nog to never unregister the keybinding as long as the program is running.
/// @param modifier String
/// @param callback () -> Void
/// @param arr Any[]
/// @param always_active Boolean?
/// @example
/// nog.bind_arr("Alt", nog.workspace.change, range(10))
/// @example
extern fn bind_arr(modifier, callback, arr, always_active)

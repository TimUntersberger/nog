/// Switches the focused workspace to the one that has the given id
/// @param id Number
extern fn change(id)

/// Moves the focused workspace to the monitor that has the given index
/// @param id Number
extern fn move_to_monitor(id)

/// Moves all windows in the focused workspace to the workspace that has 
/// the given index while maintaining relative sizes and positions. 
/// The target workspace must be empty. This allows you to transfer
/// an entire workspace to an empty workspace of a different number.
/// @param id Number
extern fn workspace_to_workspace(id)

/// Toggles fullscreen mode
extern fn toggle_fullscreen()

/// resets any resizing applied to the focused row
extern fn reset_row()

/// resets any resizing applied to the focused column
extern fn reset_col()

/// Changes the configuration of the workspace that has the given id
/// 
/// ```
/// type WorkspaceSettings = {
///     text: String?,
///     monitor: Number?
/// }
/// ```
/// @param id Number
/// @param settings WorkspaceSettings
extern fn configure(id, settings)

/// Changes the focus to the next window in the given direction
/// @param direction "Left" | "Right" | "Up" | "Down"
extern fn focus(direction)

/// Resizes the window in the given direction by the provided amount
/// @param direction "Left" | "Right" | "Up" | "Down"
/// @param amount Number
extern fn resize(direction, amount)

/// Swaps the position of the current window with the next window in the given direction
/// @param direction "Left" | "Right" | "Up" | "Down"
extern fn swap(direction)

/// Sets the workspace specific direction in which new windows get ordered
/// @param direction "Horizontal" | "Vertial"
extern fn set_split_direction(direction)

/// Moves the current window into the adjacent row/column/window found in the given
/// direction. If the adjecent item is a row or column, this simply moves the window
/// to the end of the row or column. If the adjacent item is a window, this introduces
/// a new column or row container, whichever is the opposite of the current window's
/// parent, and appends the window and the adjacent window within the new container.
/// @param direction "Left" | "Right" | "Up" | "Down"
extern fn move_in(direction)

/// Swaps the position of the current window with the next window in the given direction
/// 
/// Moves the current window out of a row/column in the given direction. The behavior 
/// of this movement is essentially moving the current window so that it is a sibling 
/// of its parent and introducing a new parent node that is the opposite type of the 
/// previous parent if necessary.
/// @param direction "Left" | "Right" | "Up" | "Down"
extern fn move_out(direction)
